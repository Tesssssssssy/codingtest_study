package week12.week12_1.kim;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

/**
 * [용액]
 *
 * KOI 부설 과학연구소에서는 많은 종류의 산성 용액과 알칼리성 용액을 보유하고 있다.
 * 각 용액에는 그 용액의 특성을 나타내는 하나의 정수가 주어져있다.
 * 산성 용액의 특성값은 1부터 1,000,000,000까지의 양의 정수로 나타내고,
 * 알칼리성 용액의 특성값은 -1부터 -1,000,000,000까지의 음의 정수로 나타낸다.
 *
 * 같은 양의 두 용액을 혼합한 용액의 특성값은 혼합에 사용된 각 용액의 특성값의 합으로 정의한다.
 * 이 연구소에서는 같은 양의 두 용액을 혼합하여 특성값이 0에 가장 가까운 용액을 만들려고 한다.
 *
 * 예를 들어, 주어진 용액들의 특성값이 [-99, -2, -1, 4, 98]인 경우에는
 * 특성값이 -99인 용액과 특성값이 98인 용액을 혼합하면 특성값이 -1인 용액을 만들 수 있고,
 * 이 용액의 특성값이 0에 가장 가까운 용액이다.
 * 참고로, 두 종류의 알칼리성 용액만으로나
 * 혹은 두 종류의 산성 용액만으로
 * 특성값이 0에 가장 가까운 혼합 용액을 만드는 경우도 존재할 수 있다.
 *
 * 산성 용액과 알칼리성 용액의 특성값이 정렬된 순서로 주어졌을 때,
 * 이 중 두 개의 서로 다른 용액을 혼합하여
 * 특성값이 0에 가장 가까운 용액을 만들어내는 두 용액을 찾는 프로그램을 작성하시오.
 *
 *
 * 입력
 * 첫째 줄에는 전체 용액의 수 N이 입력된다.
 * N은 2 이상 100,000 이하의 정수이다.
 * 둘째 줄에는 용액의 특성값을 나타내는 N개의 정수가 빈칸을 사이에 두고 오름차순으로 입력되며,
 * 이 수들은 모두 -1,000,000,000 이상 1,000,000,000 이하이다.
 * N개의 용액들의 특성값은 모두 서로 다르고,
 * 산성 용액만으로나 알칼리성 용액만으로 입력이 주어지는 경우도 있을 수 있다.
 *
 *
 * 출력
 * 첫째 줄에 특성값이 0에 가장 가까운 용액을 만들어내는 두 용액의 특성값을 출력한다.
 * 출력해야 하는 두 용액은 특성값의 오름차순으로 출력한다.
 * 특성값이 0에 가장 가까운 용액을 만들어내는 경우가 두 개 이상일 경우에는 그 중 아무것이나 하나를 출력한다.
 *
 *
 * 예제 입력 1
 * 5
 * -99 -2 -1 4 98
 *
 * 예제 출력 1
 * -99 98
 *
 * 예제 입력 2
 * 4
 * -100 -2 -1 103
 *
 * 예제 출력 2
 * -2 -1
*/


/*
* *완전탐색에서 시간초과가 나면, 이분탐색이나 투포인터 알고리즘 시도해보기
*
*
* 이분탐색 vs 투포인터
*
*   이분탐색(이진탐색): mid를 활용해 매 연산마다 탐색하는 범위를 절반으로 좁혀 나감
*
*   투포인터: left, right 두 개의 포인터를 한 칸씩 이동하면서 알맞은 값을 찾음
*
*
*               이분탐색                                                   투포인터
*
*   시간복잡도   O(log N)                                                   O(N)
*
*   가정        데이터가 정렬되어 있어야 함                                     X
*
*   방식        mid를 활용해서 매 연산마다 탐색하는 범위를 절반으로 좁혀 나감       양끝단에서 한칸씩 이동하면서 알맞는 값을 찾음
* */

// 투포인터
public class Ex1 {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        // 전체 용액의 수를 입력
        int N = Integer.parseInt(br.readLine());

        // 각 용액의 특성값을 저장할 배열 선언
        int[] arr = new int[N];
        StringTokenizer st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            // 용액의 특성값을 입력받아 배열에 저장
            arr[i] = Integer.parseInt(st.nextToken());
        }

        // 시작 포인터 설정
        int start = 0;
        // 끝 포인터 설정
        int end = N - 1;
        // 특성값의 합의 최소값을 저장할 변수를 선언하고
        // 최대값으로 초기화
        int min = Integer.MAX_VALUE;
        // 특성값의 합이 0에 가장 가까운
        // 두 용액의 인덱스를 저장할 변수를 선언
        int answer_start = start;
        int answer_end = end;

        while (start < end) {
            // 현재 두 용액의 특성값의 합 계산
            int sum = arr[start] + arr[end];

            // 만약 현재 합이 0에 더 가까우면
            if (Math.abs(sum) < min) {
                // 최소값을 업데이트하고
                min = Math.abs(sum);
                // 두 용액의 인덱스를 저장
                answer_start = start;
                answer_end = end;
            }

            // 만약 합이 0보다 작으면
            if (sum < 0) {
                // 시작 포인터를 오른쪽으로 이동
                start++;
            }
            // 만약 합이 0보다 크거나 같으면
            else {
                // 끝 포인터를 왼쪽으로 이동
                end--;
            }
        }

        // 특성값이 0에 가장 가까운 두 용액의 특성값을 출력
        System.out.println(arr[answer_start] + " " + arr[answer_end]);
    }
}