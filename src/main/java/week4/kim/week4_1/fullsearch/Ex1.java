package week4.kim.week4_1.fullsearch;

import java.util.ArrayList;

/**
 * [전력망을 둘로 나누기]
 *
 * n개의 송전탑이 전선을 통해 하나의 트리 형태로 연결되어 있습니다.
 * 당신은 이 전선들 중 하나를 끊어서 현재의 전력망 네트워크를 2개로 분할하려고 합니다.
 * 이때, 두 전력망이 갖게 되는 송전탑의 개수를 최대한 비슷하게 맞추고자 합니다.
 *
 * 송전탑의 개수 n, 그리고 전선 정보 wires가 매개변수로 주어집니다.
 * 전선들 중 하나를 끊어서 송전탑 개수가 가능한 비슷하도록 두 전력망으로 나누었을 때,
 * 두 전력망이 가지고 있는 송전탑 개수의 차이(절대값)를 return 하도록 solution 함수를 완성해주세요.
 *
 * 제한사항
 * n은 2 이상 100 이하인 자연수입니다.
 * wires는 길이가 n-1인 정수형 2차원 배열입니다.
 * wires의 각 원소는 [v1, v2] 2개의 자연수로 이루어져 있으며,
 * 이는 전력망의 v1번 송전탑과 v2번 송전탑이 전선으로 연결되어 있다는 것을 의미합니다.
 * 1 ≤ v1 < v2 ≤ n 입니다.
 * 전력망 네트워크가 하나의 트리 형태가 아닌 경우는 입력으로 주어지지 않습니다.
 *
 * 입출력 예
 * n	wires	                                            result
 * 9	[[1,3],[2,3],[3,4],[4,5],[4,6],[4,7],[7,8],[7,9]]	3
 * 4	[[1,2],[2,3],[3,4]]	                                0
 * 7	[[1,2],[2,7],[3,7],[3,4],[4,5],[6,7]]	            1
 *
 * 입출력 예 설명
 * 입출력 예 #1
 *
 * 다음 그림은 주어진 입력을 해결하는 방법 중 하나를 나타낸 것입니다.
 * ex1.png
 * 4번과 7번을 연결하는 전선을 끊으면 두 전력망은 각 6개와 3개의 송전탑을 가지며, 이보다 더 비슷한 개수로 전력망을 나눌 수 없습니다.
 * 또 다른 방법으로는 3번과 4번을 연결하는 전선을 끊어도 최선의 정답을 도출할 수 있습니다.
 * 입출력 예 #2
 *
 * 다음 그림은 주어진 입력을 해결하는 방법을 나타낸 것입니다.
 * ex2.png
 * 2번과 3번을 연결하는 전선을 끊으면 두 전력망이 모두 2개의 송전탑을 가지게 되며, 이 방법이 최선입니다.
 * 입출력 예 #3
 *
 * 다음 그림은 주어진 입력을 해결하는 방법을 나타낸 것입니다.
 * ex3.png
 * 3번과 7번을 연결하는 전선을 끊으면 두 전력망이 각각 4개와 3개의 송전탑을 가지게 되며, 이 방법이 최선입니다.
 */

public class Ex1 {
    public static void main(String[] args) {
        Ex1 ex1 = new Ex1();

        int n = 9;
        int[][] wires = {{1,3},{2,3},{3,4},{4,5},{4,6},{4,7},{7,8},{7,9}};

        // 3
        System.out.println(ex1.solution(n, wires));
    }

    // 트리 구조를 나타내는 배열, 각 노드의 연결된 노드들을 저장
    ArrayList<Integer>[] tree;
    // 노드 방문 여부를 확인하는 배열
    boolean[] visited;
    // 각 노드를 루트로 하는 서브트리의 노드 개수를 저장하는 배열
    int[] count;
    // 두 전력망의 송전탑 개수 차이의 최소값을 저장하는 변수
    int answer = Integer.MAX_VALUE;

    public int solution(int n, int[][] wires) {
        // 트리, 방문 배열, 카운트 배열 초기화
        tree = new ArrayList[n+1];
        visited = new boolean[n+1];
        count = new int[n+1];

        // 트리 배열의 각 인덱스에 ArrayList를 생성하여 초기화
        for(int i=1; i<=n; i++) {
            tree[i] = new ArrayList<>();
        }

        // 전선 정보를 바탕으로 트리 구성
        for(int i=0; i<n-1; i++) {
            int a = wires[i][0];
            int b = wires[i][1];

            tree[a].add(b);
            tree[b].add(a);
        }

        // 1번 노드부터 DFS 실행하여 각 노드의 서브트리 노드 개수 계산
        dfs(1);

        // 2번 노드부터 n번 노드까지
        // 각 노드를 루트로 하는 서브트리와
        // 나머지 트리의 노드 개수 차이의
        // 절대값을 계산하여 최소값 갱신
        for(int i=2; i<=n; i++) {
            answer = Math.min(answer, Math.abs((n-count[i]) - count[i]));
        }

        // 계산된 최소값 반환
        return answer;
    }

    // DFS를 실행하여 각 노드를 루트로 하는
    // 서브트리의 노드 개수를 계산하는 메서드
    public int dfs(int node) {
        // 현재 노드를 방문 처리
        visited[node] = true;

        // 현재 노드에 연결된 노드들을 순회
        for(int next : tree[node]) {
            // 방문하지 않은 노드에 대해 DFS 실행
            if(!visited[next]) {
                count[node] += dfs(next);
            }
        }

        // 현재 노드를 포함하여 서브트리의 노드 개수 1 증가
        return count[node] += 1;
    }
}